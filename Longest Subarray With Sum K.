Better Solution: using map
BY this solution all the testcases are passed if we have both negative and positive element in array. But we have all elements are positive and zeros then we can have one more optimal solution.

Note: contain positive and negative element
#include <bits/stdc++.h> 
int getLongestSubarray(vector<int>& a, int k){
    map<long long, int> preSum;
    long long sum  = 0;
    int maxLen = 0;
    for(int i = 0;i<a.size();i++)
    {
        sum += a[i];
        if(sum == k){
            maxLen = max(maxLen, i+1);
        }
        long long rem = sum - k;
        if(preSum.find(rem) != preSum.end())
        {
            int len = i - preSum[rem];
            maxLen = max(maxLen, len);
        }
        if(preSum.find(sum) == preSum.end())
        {
            preSum[sum]=i;
        }
    }
    return maxLen;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Optimal Solution: using 2 pointer
Note :contain only positive and zeros
int getLongestSubarray(vector<int>& a, int k){
   int left = 0, right = 0;
   long long sum = a[0];
   int maxLen = 0;
   int n = a.size();
   while(right < n){
        while(left <= right && sum > k){
            sum -= a[left];
            left++;
        }
        if(sum == k){
            maxLen = max(maxLen, right - left + 1);
        }
        right++;
        if(right < n)
            sum += a[right];
   }
    return maxLen;
}
